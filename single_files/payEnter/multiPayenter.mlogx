#For when one reconstructor isn't enough.
#Multi Payenter by BalaM314
#change a single number in ./config.json to change the number of reconstructors this supports. mlogx goes brrrrrrr.

#require cookie
print "$(numRecons)x Payenter by BalaM314"
print "Source code available at $githubUrl"
#Config
set unitType @horizon
set offSwitch switch1
set maxDist 50
print "Config options above"
#Runtime variables
restart:
	&for n in 1 $numRecons {
		jump restart equal reconstructor$(n) null
		#if the reconstructor isn't bound, the schem is still being built, so restart
		sensor reconstructor$(n).x
		sensor reconstructor$(n).y
		#get the x and y position
	}

&for n in 1 $numRecons {
	set unit$(n) :unit null
}

main_loop:
	jump not_switched_off offSwitch ~= null #If there is no off switch, continue
	sensor offSwitch.enabled
	jump main_loop offSwitch.enabled ~= false
	not_switched_off:

	check_units: #Check if a unit is dead or controlled by a player, if it is bind a new one.
		&for n in 1 $numRecons {
			check_unit$(n)_ok:
			sensor unit$(n).dead
			sensor unit$(n).controlled
			jump bind_unit$(n) unit$(n).dead ~= true
			jump bind_unit$(n) unit$(n).controlled > 1
			unit$(n)_ok:
		}

	move_units: #Move each unit to its destination.
		&for n in 1 $numRecons {
			move_unit$(n):
			ubind unit$(n)
			ucontrol move reconstructor$(n).x reconstructor$(n).y
			ucontrol boost true
			&if $print {
				sensor @unit.x
				op floor @unit.x
				sensor @unit.y
				op floor @unit.y
				printf "Unit $(n) is at {@unit.x}, {@unit.y}\n"
			}
			ucontrol within reconstructor$(n).x reconstructor$(n).y 3 unit$(n).reached
			jump unit$(n)_moved unit$(n).reached == false
			#unit reached destination, payenter
			ucontrol payEnter
			unit$(n)_moved:
		}
		&if $print {
			print "Open the adjacent proc to change unit type"
			printflush message1
		}
		jump main_loop

		
	&for n in 1 $numRecons {
		bind_unit$(n):
		#Bind a unit, but check if it's alive and unflagged.
		ubind unitType
		sensor @unit.flag
		sensor @unit.controlled
		jump bind_unit$(n) notEqual @unit.flag 0
		jump bind_unit$(n) greaterThan @unit.controlled 1
		ucontrol within @thisx @thisy maxDist close
		jump bind_unit$(n) equal close false
		ucontrol flag cookie
		set unit$(n) @unit
		&if $print {
		println "Bound unit $(n)"
		}
		jump unit$(n)_ok
	}