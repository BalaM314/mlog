jump restart always 0 0
print "Resource Manager by BalaM314"
print "Source code available at https://github.com/BalaM314/mlog/tree/main/projects/ResourceManager/"
print "Hardcoded edition: Limited configuration options."
print "Intended for use in specific schematics."
restart:
set startingLinks @links
set stdout message1
print "Starting...\n\n$(hardcoded.name) by $(hardcoded.author)"
printflush stdout
set offSwitch switch1
set onSwitch switch2
set powerBuilding null
set cell cell1
set maxCoreCap 30000
set minInputPerc 8
set minOutputPerc 0.5
set maxOutputPerc 98
set minPowerPerc 30
print "Do not edit below this line."
printflush null
set shouldRun true
ubind @mono
sensor unit.dead @unit @dead
jump locate_core notEqual unit.dead true
ubind @flare
sensor unit.dead @unit @dead
jump locate_core notEqual unit.dead true
ubind @poly
sensor unit.dead @unit @dead
jump locate_core notEqual unit.dead true
ubind @mega
sensor unit.dead @unit @dead
jump locate_core notEqual unit.dead true
set core nucleus1
jump core_found notEqual core null
set core foundation1
jump core_found notEqual core null
set core shard1
jump core_found notEqual core null
set core vault1
jump core_found notEqual core null
set core bastion1
jump core_found notEqual core null
set core citadel1
jump core_found notEqual core null
set core acropolis1
jump core_found notEqual core null
set core nucleus2
jump core_found notEqual core null
set core foundation2
jump core_found notEqual core null
set core vault2
jump core_found notEqual core null
set err "Can't find the core. Please link the core or make a mono/flare."
jump err always 0 0
locate_core:
ulocate building core false _ coreX coreY _ core
ubind null
core_found:
jump power_building_found notEqual powerBuilding null
set i 0
get_power_building_loop:
getlink powerBuilding i
sensor powerBuilding.powerNetIn powerBuilding @powerNetIn
jump power_building_found notEqual powerBuilding.powerNetIn 0
op add i i 1
jump get_power_building_loop lessThan i @links
set err "Can't find any power buildings. Please link a power building or disable power management."
jump err always 0 0
power_building_found:
main_loop:
jump restart notEqual @links startingLinks
sensor core.itemCapacity core @itemCapacity
op min inputCoreCap core.itemCapacity maxCoreCap
sensor powerBuilding.powerNetStored powerBuilding @powerNetStored
sensor powerBuilding.powerNetCapacity powerBuilding @powerNetCapacity
op div powerPerc powerBuilding.powerNetStored powerBuilding.powerNetCapacity
op idiv powerPerc powerPerc 0.001
op div powerPerc powerPerc 10
op div inputPerc$i core.input$i inputCoreCap
op idiv inputPerc$i inputPerc$i 0.001
op div inputPerc$i inputPerc$i 10
sensor core.output core output
op div outputPerc core.output core.itemCapacity
op idiv outputPerc outputPerc 0.001
op div outputPerc outputPerc 10
jump no_off_switch equal offSwitch null
sensor offSwitch.enabled offSwitch @enabled
sensor onSwitch.enabled onSwitch @enabled
jump process always 0 0
no_off_switch:
set offSwitch.enabled false
set onSwitch.enabled false
process:
set shouldRun true
jump power_ok equal managePower false
jump power_ok greaterThan powerPerc minPowerPerc
print "[yellow]⚠ Low stored power.[] ("
print powerPerc
print "% < "
print minPowerPerc
print "%)\n"
set shouldRun false
power_ok:
jump all_inputs_ok equal input$i null
jump input$i_ok greaterThan inputPerc$i minInputPerc
print "[yellow]⚠ Low "
print input$i
print "[]. ("
print inputPerc$i
print "% < "
print minInputPerc
print "%)\n"
set shouldRun false
input$i_ok:
all_inputs_ok:
jump output_not_low equal output null
jump output_not_low greaterThanEq outputPerc minOutputPerc
print "[yellow]⚠ Low "
print output
print "[]. ("
print outputPerc
print "% < "
print minOutputPerc
print "%)\n"
set shouldRun true
output_not_low:
jump output_not_high lessThanEq outputPerc maxOutputPerc
print "[green]✔ Core is full of "
print output
print "[].\n"
set shouldRun false
output_not_high:
jump override_off equal offSwitch.enabled true
jump override_on equal onSwitch.enabled true
jump print_status always 0 0
override_off:
print "[red]⚠ Manually switched off.[]\n"
set shouldRun false
jump print_status always 0 0
override_on:
print "[red]⚠ Manually forced on.[]\n"
set shouldRun true
jump print_status always 0 0
print_status:
jump print_true equal shouldRun true
print "Status: [red]Disabled[].\n"
jump write always 0 0
print_true:
print "Status: [green]Enabled[].\n"
write:
write shouldRun cell 0
set i 0
write_loop:
getlink linkedBuilding i
op add i i 1
sensor linkedBuilding.type linkedBuilding @type
jump next equal linkedBuilding.type @switch
jump next equal linkedBuilding.type @battery
jump next equal linkedBuilding.type @battery-large
control enabled linkedBuilding shouldRun
next:
jump write_loop lessThan i @links
print "\n[slate]$hardcoded.name"
printflush message1
jump main_loop always 0 0
err:
print "[red]Error: "
print err
print "\n\n[white]Resource Manager"
printflush stdout
wait 3
end
print "Made with mlogx"
print "github.com/BalaM314/mlogx/"