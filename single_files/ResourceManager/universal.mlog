jump restart always 0 0
print "Resource Manager by BalaM314"
print "Source code available at https://github.com/BalaM314/mlog/tree/main/projects/ResourceManager/"
print "Usage instructions:"
print "Bind to core, power node, switches, and all buildings that should be managed."
print "Then change variables below."
restart:
set startingLinks @links
set stdout message1
print "Starting...\n\nResource Manager"
printflush stdout
print "Edit variables below."
set input1 null
set input2 null
set input3 null
set input4 null
set output null
set managePower true
set offSwitch switch1
set onSwitch switch2
set powerBuilding null
set cell cell1
set maxCoreCap 30000
set maxPowerCap 5000000
set minInputPerc 8
set minOutputPerc 0.5
set maxOutputPerc 98
set minPowerPerc 30
print "Do not edit below this line."
printflush null
set shouldRun true
ubind @mono
sensor unit.dead @unit @dead
jump locate_core notEqual unit.dead true
ubind @flare
sensor unit.dead @unit @dead
jump locate_core notEqual unit.dead true
ubind @poly
sensor unit.dead @unit @dead
jump locate_core notEqual unit.dead true
ubind @mega
sensor unit.dead @unit @dead
jump locate_core notEqual unit.dead true
set core nucleus1
jump core_found notEqual core null
set core foundation1
jump core_found notEqual core null
set core shard1
jump core_found notEqual core null
set core vault1
jump core_found notEqual core null
set core bastion1
jump core_found notEqual core null
set core citadel1
jump core_found notEqual core null
set core acropolis1
jump core_found notEqual core null
set core nucleus2
jump core_found notEqual core null
set core foundation2
jump core_found notEqual core null
set core vault2
jump core_found notEqual core null
set err "Can't find the core. Please link the core or make a mono/flare."
jump err always 0 0
locate_core:
ulocate building core false _ coreX coreY _ core
ubind null
core_found:
jump power_building_found notEqual powerBuilding null
set i 0
get_power_building_loop:
getlink powerBuilding i
sensor powerBuilding.powerNetIn powerBuilding @powerNetIn
jump power_building_found notEqual powerBuilding.powerNetIn 0
op add i i 1
jump get_power_building_loop lessThan i @links
set err "Can't find any power buildings. Please link a power building or disable power management."
jump err always 0 0
power_building_found:
main_loop:
jump restart notEqual @links startingLinks
sensor core.itemCapacity core @itemCapacity
op min inputCoreCap core.itemCapacity maxCoreCap
sensor powerBuilding.powerNetStored powerBuilding @powerNetStored
sensor powerBuilding.powerNetCapacity powerBuilding @powerNetCapacity
op min powerNetCap powerBuilding.powerNetCapacity maxPowerCap
op div powerPerc powerBuilding.powerNetStored powerNetCap
op idiv powerPerc powerPerc 0.001
op div powerPerc powerPerc 10
jump inputs_done equal input1 null
sensor core.input1 core input1
op div inputPerc1 core.input1 inputCoreCap
op idiv inputPerc1 inputPerc1 0.001
op div inputPerc1 inputPerc1 10
jump inputs_done equal input2 null
sensor core.input2 core input2
op div inputPerc2 core.input2 inputCoreCap
op idiv inputPerc2 inputPerc2 0.001
op div inputPerc2 inputPerc2 10
jump inputs_done equal input3 null
sensor core.input3 core input3
op div inputPerc3 core.input3 inputCoreCap
op idiv inputPerc3 inputPerc3 0.001
op div inputPerc3 inputPerc3 10
jump inputs_done equal input4 null
sensor core.input4 core input4
op div inputPerc4 core.input4 inputCoreCap
op idiv inputPerc4 inputPerc4 0.001
op div inputPerc4 inputPerc4 10
inputs_done:
sensor core.output core output
op div outputPerc core.output core.itemCapacity
op idiv outputPerc outputPerc 0.001
op div outputPerc outputPerc 10
jump no_off_switch equal offSwitch null
sensor offSwitch.enabled offSwitch @enabled
sensor onSwitch.enabled onSwitch @enabled
jump process always 0 0
no_off_switch:
set offSwitch.enabled false
set onSwitch.enabled false
process:
set shouldRun true
jump power_ok equal managePower false
jump power_ok greaterThan powerPerc minPowerPerc
print "[yellow]⚠ Low stored power.[] ("
print powerPerc
print "% < "
print minPowerPerc
print "%)\n"
set shouldRun false
power_ok:
jump all_inputs_ok equal input1 null
jump input1_ok greaterThan inputPerc1 minInputPerc
print "[yellow]⚠ Low "
print input1
print "[]. ("
print inputPerc1
print "% < "
print minInputPerc
print "%)\n"
set shouldRun false
input1_ok:
jump all_inputs_ok equal input2 null
jump input2_ok greaterThan inputPerc2 minInputPerc
print "[yellow]⚠ Low "
print input2
print "[]. ("
print inputPerc2
print "% < "
print minInputPerc
print "%)\n"
set shouldRun false
input2_ok:
jump all_inputs_ok equal input3 null
jump input3_ok greaterThan inputPerc3 minInputPerc
print "[yellow]⚠ Low "
print input3
print "[]. ("
print inputPerc3
print "% < "
print minInputPerc
print "%)\n"
set shouldRun false
input3_ok:
jump all_inputs_ok equal input4 null
jump input4_ok greaterThan inputPerc4 minInputPerc
print "[yellow]⚠ Low "
print input4
print "[]. ("
print inputPerc4
print "% < "
print minInputPerc
print "%)\n"
set shouldRun false
input4_ok:
all_inputs_ok:
jump output_not_low equal output null
jump output_not_low greaterThanEq outputPerc minOutputPerc
print "[yellow]⚠ Low "
print output
print "[]. ("
print outputPerc
print "% < "
print minOutputPerc
print "%)\n"
set shouldRun true
output_not_low:
jump output_not_high lessThanEq outputPerc maxOutputPerc
print "[green]✔ Core is full of "
print output
print "[].\n"
set shouldRun false
output_not_high:
jump override_off equal offSwitch.enabled true
jump override_on equal onSwitch.enabled true
jump print_status always 0 0
override_off:
print "[red]⚠ Manually switched off.[]\n"
set shouldRun false
jump print_status always 0 0
override_on:
print "[red]⚠ Manually forced on.[]\n"
set shouldRun true
jump print_status always 0 0
print_status:
jump print_true equal shouldRun true
print "Status: [red]Disabled[].\n"
jump write always 0 0
print_true:
print "Status: [green]Enabled[].\n"
write:
write shouldRun cell 0
set i 0
write_loop:
getlink linkedBuilding i
op add i i 1
sensor linkedBuilding.type linkedBuilding @type
jump next equal linkedBuilding.type @switch
jump next equal linkedBuilding.type @battery
jump next equal linkedBuilding.type @battery-large
control enabled linkedBuilding shouldRun
next:
jump write_loop lessThan i @links
print "\n[slate]Resource Manager"
printflush message1
jump main_loop always 0 0
err:
print "[red]Error: "
print err
print "\n\n[white]Resource Manager"
printflush stdout
wait 5
end
print "Made with mlogx"
print "github.com/BalaM314/mlogx/"