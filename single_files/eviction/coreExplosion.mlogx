set bank cell1
set fallen 4
set playerTeam @sharded
setrate 50

init:
	wait 1
	init_cores:
		set i 0
		fetch coreCount fallen.coreCount fallen
		init_cores_loop:
			fetch core core fallen i
			sensor core.team
			jump init_cores_next core.team != fallen

			sensor core.x
			sensor core.y
			set ind i * 2
			write core.x bank ind
			op add ind 1
			write core.y bank ind

			init_cores_next:
			op add i 1
			jump init_cores_loop i < fallen.coreCount


main_loop:
	check_cores:
	set i 0
	check_cores_loop:
		set ind i * 2
		read core.x bank ind
		op add ind 1
		read core.y bank ind
		jump check_cores_next core.y == 0

		getblock building core core.x core.y
		sensor core.team
		jump check_cores_next core.team ~= fallen

		write 0 bank ind
		jump do_explosion

		check_cores_next:
		op add i 1
		jump check_cores_loop i < fallen.coreCount


	jump main_loop

	do_explosion:
		//little explosion for visual effects
		&for i in 1 5 {
			explosion @derelict core.x core.y 37.5 0 false false false
		}
		explosion playerTeam core.x core.y 37.5 1e12 true false true
		set i 0
		fetch unitCount unitCount playerTeam
		unit_loop:
			fetch unit unit playerTeam i

			sensor unit.x
			sensor unit.y
			set dx unit.x - core.x
			set dy unit.y - core.y
			op len dist dx dy
			jump unit_loop_next dist > 37.5

			op rand x 1
			jump unit_loop_next x < 0.5

			setprop unit.health 0

			unit_loop_next:
			op add i 1
			jump unit_loop i < unitCount
		
		jump main_loop
