#Overkill RC
#by $authors
#Memory cell layout: [enabled, load, unitId, destX, destY, shootX, shootY, shouldFire, approachDistance, secondaryUnitId, healing, overrange]

print "$name by $authors"
print "Source code available at $githubUrl"
print "Movement module"
set minHealthFrac 0.8
set unitOverride null
print "Rest of settings in micro proc"
set quickLoops 80
set logicItemTakeRadius 5

get_wait_time:
	#Because the same code is in 4 hyper processors, the same units will be bound and commanded in the same order, wasting a ton of instructions.
	#To fix this, we wait by a different amount of time after binding {quickLoops} units.
	op add pos @thisx @thisy
	op mod pos pos 20
	op div waitTime pos 800
	op add waitTime waitTime 0.01


#Null check, doesnt start running until the schem is fully built.
restart:
	jump restart equal sorter1 null
	jump restart equal cell1 null
	set bombingItemSorter sorter1
	set cell cell1

#Read things from the memory cell
init_read_cell:
	wait waitTime #Without this, the movement processors would be binding the same units in the same order, therefore being useless.
	read enabled cell $memcellpos.enabled
	read loading cell $memcellpos.loading
	read unit.id cell $memcellpos.unitId
	read dest.x cell $memcellpos.destX
	read dest.y cell $memcellpos.destY
	read shoot.x cell $memcellpos.shootX
	read shoot.y cell $memcellpos.shootY
	read shouldFire cell $memcellpos.shouldFire
	read approachDistance cell $memcellpos.approachDistance
	read healing cell $memcellpos.healing
	read overrange cell $memcellpos.overrange
	jump init_read_cell equal enabled false

	get_static_vars:
		sensor bombingItem bombingItemSorter @config
		lookup unit unitType unit.id
		jump no_unit_override equal unitOverride null
		set unitType unitOverride
		no_unit_override:
		ubind unitType
		sensor unit.range
		sensor unit.itemCapacity
		sensor unit.maxHealth
		op mul minHealth unit.maxHealth minHealthFrac

set i 0
send_commands_loop:
	bind_unit:
		ubind unitType
		sensor unit.flag
		jump bind_unit notEqual unit.flag 0
	
	#If loading or healing jump there and then jump back
	jump load equal loading true
	loaded:
	jump heal equal healing true
	healed:
	
	send_commands:
		ucontrol approach dest.x dest.y approachDistance
		ucontrol within shoot.x shoot.y unit.range unit.targetInRange
		jump target_position equal unit.targetInRange true
		jump target_self equal overrange false

		target_overrange:
			sensor unit.x
			sensor unit.y

			#Trigonometry!
			#Get the difference in position
			op sub difference.x shoot.x unit.x
			op sub difference.y shoot.y unit.y
			#Make normalized vector
			op angle shoot.angle difference.x difference.y
			op cos shoot.normalized.x shoot.angle
			op sin shoot.normalized.y shoot.angle
			#Scale vector
			op mul shooting.x shoot.normalized.x unit.range
			op mul shooting.y shoot.normalized.y unit.range
			#Move to unit position
			op add shooting.x shooting.x unit.x
			op add shooting.y shooting.y unit.y

			#Fire!
			ucontrol target shooting.x shooting.y shouldFire
			#end_send_commands_loop
			op add i i 1
			jump send_commands_loop lessThan i quickLoops
			jump init_read_cell
		
		target_position:
			ucontrol target shoot.x shoot.y shouldFire
			#end_send_commands_loop
			op add i i 1
			jump send_commands_loop lessThan i quickLoops
			jump init_read_cell
		
		target_self:
			ucontrol targetp @unit shouldFire
			#end_send_commands_loop
			op add i i 1
			jump send_commands_loop lessThan i quickLoops
			jump init_read_cell


	load:
		#Optimization is painful.
		sensor unit.firstItem
		sensor unit.totalItems
		jump handle_take_item notEqual unit.firstItem bombingItem
		jump loaded equal unit.totalItems unit.itemCapacity

	handle_take_item:
		move_to_core:
			ulocate building core false core.x core.y core.exists core #Core needs to be ulocated for each unit.
			ucontrol move core.x core.y
		jump item_cleared equal unit.firstItem null
	drop_item:
		ucontrol itemDrop core 9999
	item_cleared:
		ucontrol itemTake core bombingItem 9999
		#end_send_commands_loop
		op add i i 1
		jump send_commands_loop lessThan i quickLoops
		jump init_read_cell

	heal:
		sensor unit.health
		jump healed greaterThan unit.health minHealth
		ulocate building repair false healTurret.x healTurret.y isFound healTurret
		jump healed equal isFound false #remove this check eventually as the rc schem will have repair turret spam
		ucontrol move healTurret.x healTurret.y
		#end_send_commands_loop
		op add i i 1
		jump send_commands_loop lessThan i quickLoops
		jump init_read_cell
	