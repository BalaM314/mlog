#Overkill RC by $authors
#Memory cell layout: [enabled, load, unitId, destX, destY, shootX, shootY, shouldFire, approachDistance, secondaryUnitId]

print "$name by $authors"
print "Source code available at $githubUrl"
print "Control module"
print "Configurable settings below:"

#Custom vars inputed
set idle.x @thisx
set idle.y @thisy
set unitIdOverride 0
set idleApproachDistance 18.5
op mul idleFireInterval 10 1000
print "Do not change below"
set quickLoops 16 #The amount of quick loops to perform before rereading settings.

#When idle, the units will fire every 10 seconds.

#Null check, doesnt start running until the schem is fully built.
restart:
jump restart equal switch1 null
jump restart equal switch2 null
jump restart equal switch3 null
jump restart equal switch4 null
jump restart equal switch5 null
jump restart equal cell1 null
jump restart equal sorter1 null
jump restart equal sorter2 null
jump restart equal arc1 null
set enabledSwitch switch1
set loadingSwitch switch2
set longrangeSwitch switch3
set healingSwitch switch4
set overrangeSwitch switch5
set unitSorter sorter1
set bombingItemSorter sorter2
set cell cell1
set arc arc1

main_loop:

get_settings:
	#Get variables that don't change often.
	sensor isActive arc @controlled
	sensor enabled enabledSwitch @enabled
	sensor loading loadingSwitch @enabled
	sensor longrange longrangeSwitch @enabled
	sensor healing healingSwitch @enabled
	sensor overrange overrangeSwitch @enabled
	sensor bombingItem bombingItemSorter @config
	op and loading bombingItem
	jump unitId_defined notEqual unitIdOverride 0

	choose_unit:
		sensor sorter.item unitSorter @config
		jump quad equal sorter.item @titanium
		jump zenith equal sorter.item @metaglass
		jump horizon equal sorter.item @lead
		jump antumbra equal sorter.item @plastanium
		jump eclipse equal sorter.item @surge-alloy
		jump flare equal sorter.item @scrap
	
	no_unit:
		set enabled false
		jump write_values always
	quad:
		set unitId 23
		jump write_values always
	zenith:
		set unitId 17
		jump write_values always
	horizon:
		set unitId 16
		jump write_values always
	antumbra:
		set unitId 18
		jump write_values always
	eclipse:
		set unitId 19
		jump write_values always
	flare:
		set unitId 15
		jump write_values always
	
unitId_defined:
	set unitId unitIdOverride


write_values:
	#If idle, just write idle values
	jump idle equal isActive false

#Write slow values that don't need to update quickly.
write_slow_values:
	write unitId cell $memcellpos.unitId
	write unitId cell $memcellpos.secondaryUnitId #TODO allow selection of secondary unit
	write enabled cell $memcellpos.enabled
	write loading cell $memcellpos.loading
	write false cell $memcellpos.healing #Don't heal when not idle
	sensor arc.shooting
	write true cell $memcellpos.shouldFire #not idle so always shoot
	write overrange cell $memcellpos.overrange
	jump longrange_quick_loop equal longrange true
	jump approach_far equal arc.shooting true
	approach_close:
		write 1 cell $memcellpos.approachDistance
		jump approach_chosen
	approach_far:
		write 15 cell $memcellpos.approachDistance
	approach_chosen:

#A quick loop to write the shoot pos quickly.
set i 0
quick_loop:

	get_variables:
		sensor arc.shootX
		sensor arc.shootY
		
	write:
		write arc.shootX cell $memcellpos.destX
		write arc.shootY cell $memcellpos.destY
		write arc.shootX cell $memcellpos.shootX
		write arc.shootY cell $memcellpos.shootY
	
	end_quick_loop:
	op add i i 1
	jump quick_loop lessThan i quickLoops
	jump main_loop always

longrange_quick_loop:

	longrange_get_variables:
		sensor arc.shootX
		sensor arc.shootY
		sensor arc.shooting
		jump write_target equal arc.shooting false
		#When mouse down, set movement target and shoot target.

	longrange_write:
		write_dest:
			write arc.shootX cell $memcellpos.destX
			write arc.shootY cell $memcellpos.destY
			jump longrange_end_quick_loop
		write_target:
			write arc.shootX cell $memcellpos.shootX
			write arc.shootY cell $memcellpos.shootY

	longrange_end_quick_loop:
	op add i i 1
	jump longrange_quick_loop lessThan i quickLoops
	jump main_loop always

#set idle vars for quick_loop to send out
idle:
	write idle.x cell $memcellpos.destX
	write idle.y cell $memcellpos.destY
	write idle.x cell $memcellpos.shootX
	write idle.y cell $memcellpos.shootY
	write unitId cell $memcellpos.unitId
	write enabled cell $memcellpos.enabled
	write loading cell $memcellpos.loading
	write overrange cell $memcellpos.overrange
	write idleApproachDistance cell $memcellpos.approachDistance
	op mod frames @time idleFireInterval
	op lessThan shouldFire frames 500
	write shouldFire cell $memcellpos.shouldFire
	jump quick_loop lessThan i quickLoops
	jump main_loop always