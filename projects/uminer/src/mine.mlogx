#Uminer by BalaM314, version 0.0.0
# Memory cell layout: [
# 0: mode(0 = disabled, 1 = enabled)
# 1: megas mining @copper
# 2: megas mining @lead
# 5: megas mining @sand
# 6: megas mining @coal
# 7: megas mining @titanium
# 9: megas mining @scrap
# ]

#Note: this code (will be)is optimized, and therefore (will) lack error checking. It depends on the control processor to get everything right.

set cell cell1
set stdout message1
set stderr message1
set approachRadius 5
set unitType @mega
set memcellOffset 1 #Offset for the memcell array of number of units mining each ore

get_core:
	ubind @mono
	sensor @unit.dead
	jump _get_core equal @unit.dead false
	ubind @flare
	sensor @unit.dead
	jump _get_core equal @unit.dead false
	ubind @mega
	sensor @unit.dead
	jump _get_core equal @unit.dead false
	ubind @poly
	sensor @unit.dead
	jump _get_core equal @unit.dead false
	jump no_units always

	_get_core:
		ulocate building core false core.x core.y core.exists core
		jump core_dead equal core.exists false
	

reset_ore_type:
	set oreId -1 #Will be incremented to 0(copper) on next line.

get_ore_type:
	op add oreId 1 #Go to next oreId
	#Fancy complicated logic.
	lookup item mineOreType oreId #Find the item with id specified by oreId
	op add orePointer oreId memcellOffset #Set orePointer to oreId + memcellOffset
	read numberToMine cell orePointer #Read the number of units that should be set to mine this.
	jump reset_ore_type greaterThan oreId 8 #If oreId is greater than 8(scrap) go back to 0.
	
main_loop:

	check_ore_type:
		jump get_ore_type equal numberToMine 0 #If the number of units that need to be mining the current ore is 0, go to next ore.

	bind_unit:
		ubind unitType
		sensor @unit.flag
		jump bind_unit notEqual @unit.flag 0
	
	
	check_items:
		sensor @unit.firstItem
		jump mine equal @unit.firstItem null
		jump drop_items notEqual @unit.firstItem mineOreType
		sensor @unit.totalItems
		sensor @unit.itemCapacity
		jump drop_items greaterThanEq @unit.totalItems @unit.itemCapacity

	mine:

		find_ore:
			ulocate ore mineOreType ore.x ore.y ore.exists
			jump no_ore equal ore.exists false

		move_unit_to_ore:
			ucontrol approach ore.x ore.y approachRadius
		
		mine_ore:
			ucontrol mine ore.x ore.y
			op sub numberToMine 1
			jump main_loop always
		
	drop_items:
		ucontrol move core.x core.y
		ucontrol itemDrop core 69420
		jump main_loop always

	low_health:
		ulocate building repair false repair.x repair.y repair.exists repair
		jump no_repair equal repair.exists false
		ucontrol approach repair.x repair.y approachRadius


no_ore:
	print "[red]No ore of type "
	print mineOreType
	print " found!"
	printflush stderr
	end

no_units:
	print "[red]No units!"
	printflush stderr
	end

no_repair:
	print "[red]Some units are at low health but there aren't any repair points."
	printflush stderr
	end

core_dead:
	print "[red]Looks like the core is dead. GG"
	printflush stderr
	end