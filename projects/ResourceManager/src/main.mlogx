#$name by $authors
jump restart
print "$name by $authors"
print "Source code available at $githubUrl"
print "Usage instructions:"
print "Bind to core, power node, switches, and all buildings that should be managed."
print "Then change variables below."

restart:
set startingLinks @links
set stdout message1
print "Starting..."
print "\n\n$name"
printflush stdout

print "Edit variables below."
set input1 @sand
set input2 @coal
set input3 null
set input4 null
set output @silicon
set managePower true
set offSwitch switch1
set onSwitch switch2
set powerBuilding node1

set maxCoreCap 69420
set minInputPerc 10 #Will shut off if input perc goes below this.
set minOutputPerc 2 #Will run anyway if output perc goes below this.
set maxOutputPerc 98 #Will shut off if output perc goes above this.
set minPowerPerc 30 #Will shut off it power perc goes below this.
print "Do not edit below this line."
printflush stdout
printflush stdout

set shouldRun true

jump get_core
core_found:

main_loop:

	check_links:
		jump restart notEqual @links startingLinks

	get_data:
		sensor core.itemCapacity
		op min inputCoreCap core.itemCapacity maxCoreCap
		sensor powerBuilding.powerNetStored
		sensor powerBuilding.powerNetCapacity
		op div powerPerc powerBuilding.powerNetStored powerBuilding.powerNetCapacity
		op idiv powerPerc 0.001
		op div powerPerc 10
		jump no_inputs equal input1 null
		sensor core.input1 core input1
		op div inputPerc1 core.input1 inputCoreCap
		op idiv inputPerc1 0.001
		op div inputPerc1 10
		sensor core.input2 core input2
		op div inputPerc2 core.input2 inputCoreCap
		op idiv inputPerc2 0.001
		op div inputPerc2 10
		jump no_inputs equal input3 null
		sensor core.input3 core input3
		op div inputPerc3 core.input3 inputCoreCap
		op idiv inputPerc3 0.001
		op div inputPerc3 10
		sensor core.input4 core input4
		op div inputPerc4 core.input4 inputCoreCap
		op idiv inputPerc4 0.001
		op div inputPerc4 10
		no_inputs:
		sensor core.output core output
		op div outputPerc core.output core.itemCapacity
		op idiv outputPerc 0.001
		op div outputPerc 10
		jump no_off_switch equal offSwitch null
		sensor offSwitch.enabled
		sensor onSwitch.enabled
		jump process
		no_off_switch:
		set offSwitch.enabled false
		set onSwitch.enabled false

	process:
		set shouldRun true
		jump power_ok equal managePower false
		jump power_ok greaterThan powerPerc minPowerPerc
		print "[yellow]⚠ Low stored power.[white] ("
		print powerPerc
		print "% < "
		print minPowerPerc
		print "%)\n"
		set shouldRun false
		power_ok:

		jump input1_ok equal input1 null
		jump input1_ok greaterThan inputPerc1 minInputPerc
		print "[yellow]⚠ Low "
		print input1
		print "[]. ("
		print inputPerc1
		print "% < "
		print minInputPerc
		print "%)\n"
		set shouldRun false
		input1_ok:

		jump input2_ok equal input2 null
		jump input2_ok greaterThanEq inputPerc2 minInputPerc
		print "[yellow]⚠ Low "
		print input2
		print "[]. ("
		print inputPerc2
		print "% < "
		print minInputPerc
		print "%)\n"
		set shouldRun false
		input2_ok:

		jump input3_ok equal input4 null
		jump input3_ok greaterThanEq inputPerc3 minInputPerc
		print "[yellow]⚠ Low "
		print input3
		print "[]. ("
		print inputPerc3
		print "% < "
		print minInputPerc
		print "%)\n"
		set shouldRun false
		input3_ok:

		jump input4_ok equal input4 null
		jump input4_ok greaterThanEq inputPerc4 minInputPerc
		print "[yellow]⚠ Low "
		print input4
		print "[]. ("
		print inputPerc4
		print "% < "
		print minInputPerc
		print "%)\n"
		set shouldRun false
		input4_ok:

		jump output_not_low equal output null
		jump output_not_low greaterThanEq outputPerc minOutputPerc
		print "[yellow]⚠ Low "
		print output
		print "[]. ("
		print outputPerc
		print "% < "
		print minOutputPerc
		print "%)\n"
		set shouldRun true
		output_not_low:

		jump output_not_high lessThanEq outputPerc maxOutputPerc
		print "[green]✔Core is full of "
		print output
		print "[].\n"
		set shouldRun false
		output_not_high:

		jump override_off equal offSwitch.enabled true
		jump override_on equal onSwitch.enabled true
		jump print_status

		override_off:
			print "[red]Manually switched off.[]\n"
			set shouldRun false
			jump print_status always
		override_on:
			print "[red]Manually forced on.[]\n"
			set shouldRun true
			jump print_status always

	
		print_status:
			jump print_true equal shouldRun true
			print_false:
			print "Status: [red]Disabled[].\n"
			jump write
			print_true:
			print "Status: [green]Enabled[].\n"
	
	write:
		set i 0
		write_loop:
			getlink linkedBuilding i
			op add i i 1
			sensor linkedBuilding.type
			jump next equal linkedBuilding.type @switch
			jump next equal linkedBuilding.type @battery
			jump next equal linkedBuilding.type @large-battery
			jump next equal linkedBuilding.type @processor
			#TODO add more buildings that should not be disabled
			control enabled linkedBuilding shouldRun

			next:
			jump write_loop lessThan i @links

	print "\n[slate]$name"
	printflush message1
	jump main_loop


err:
	print "[red]Error: "
	print err
	print "\n\n[white]$name"
	printflush stdout
	wait 5