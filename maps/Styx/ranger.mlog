setrate 500
set range 75
restart:
count_clicks:
sensor switch1.enabled switch1 @enabled
jump restart notEqual switch1.enabled 1
control enabled switch1 false
op add switch1.clicks switch1.clicks 1
print switch1.clicks
print "/20 clicks to confirm disrupt sacrifice"
printflush message1
jump count_clicks lessThan switch1.clicks 20
set switch1.clicks 0
set blood 0
sacrifice_next_unit:
ubind @disrupt
sensor @unit.x @unit @x
sensor @unit.y @unit @y
explosion @derelict @unit.x @unit.y 2 22000 true false false
op add blood blood 3
wait 0.05
jump sacrifice_next_unit notEqual @unit.x null
jump some_units_sacrificed greaterThan blood 5
print "There's nothing to sacrifice, dummy"
message notify
jump restart always 0 0
some_units_sacrificed:
op div lives blood 45
op floor lives lives 0
op rand bloodRequired 100 0
jump sacrifice_successful greaterThan blood bloodRequired
print "[red]Sacrifice failed. George needs more bloodshed..."
message notify
jump restart always 0 0
sacrifice_successful:
print "[green]Sacrifice succesful. Enjoy."
message notify
spawn @disrupt 58 52 90 @malis ranger
unit_control_loop:
sensor ranger.shootX ranger @shootX
sensor ranger.shootY ranger @shootY
sensor ranger.shooting ranger @shooting
sensor ranger.x ranger @x
sensor ranger.y ranger @y
sensor ranger.dead ranger @dead
read maxX cell2 0
jump shoot_handled strictEqual ranger.shooting false
jump shoot_handled greaterThan ranger.shootX maxX
op sub shootDiffX ranger.shootX ranger.x
op sub shootDiffY ranger.shootY ranger.y
op len shootDistance shootDiffX shootDiffY
op min normShootDistance normShootDistance range
op div adjustmentFactor normShootDistance shootDistance
op mul adjustedShootDiffX shootDiffX adjustmentFactor
op mul adjustedShootDiffY shootDiffY adjustmentFactor
op div shootStepX adjustedShootDiffX 50
op div shootStepY adjustedShootDiffY 50
set beamX ranger.x
set beamY ranger.y
set i 0
beam_loop:
op add beamX beamX shootStepX
op add beamY beamY shootStepY
explosion @malis beamX beamY 3 5 true true false
op add i i 1
jump beam_loop lessThan i 50
shoot_handled:
set angleInterval 15
sensor angle ranger @rotation
op add angle angle -100
op add finalAngle angle 200
shield_beam_loop:
op sin shieldBeamX angle 0
op cos shieldBeamY angle 0
op mul shieldBeamX shieldBeamX 7
op mul shieldBeamY shieldBeamY 7
op add shieldBeamX shieldBeamX ranger.x
op add shieldBeamY shieldBeamY ranger.y
explosion @malis shieldBeamX shieldBeamY 3 20 true true false
op add angle angle angleInterval
jump shield_beam_loop lessThan angle finalAngle
status false overclock ranger 2147483647
status false disarmed ranger 2147483647
status false overdrive ranger 2147483647
status false boss ranger 2147483647
jump unit_control_loop strictEqual ranger.dead false
jump restart lessThanEq lives 0
spawn @disrupt @thisx @thisy 69 @malis ranger
op sub lives lives 1
print "Ranger died, but was resurrected. {lives} lives remaining."
message notify
jump unit_control_loop always 0 0